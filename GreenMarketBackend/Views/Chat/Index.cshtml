@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@model GreenMarketBackend.Models.ViewModels.ChatViewModels.ChatViewModel

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_NavBar.cshtml";
    var antiForgeryToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<head>
    <link rel="stylesheet" href="~/css/styles.css" asp-append-version="true" />
    <style>
        .chat-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-width: 600px;
            margin: auto;
        }

        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        .chat-body {
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding: 10px;
            background-color: #ffffff;
            border: 1px solid #dee2e6;
            border-radius: 5px;
        }

        .messages-list {
            flex: 1;
            padding: 10px;
            background-color: #f1f3f5;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            overflow-y: auto;
            max-height: 200px;
        }

        .message {
            display: flex;
            align-items: center;
            padding: 5px;
            margin-bottom: 5px;
            background-color: #e9ecef;
            border-radius: 5px;
        }

            .message strong {
                margin-right: 5px;
            }

        .messageInput {
            width: calc(100% - 50px);
            padding: 10px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
        }

        .sendButton {
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .sendButton:hover {
                background-color: #0056b3;
            }

        .deleteButton {
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            padding: 5px;
        }

            .deleteButton:hover {
                background-color: #c82333;
            }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4">Chat Room</h2>
        <div class="chat-container">
            @foreach (var session in Model.ChatSessions)
            {
                <div class="chat-session" data-session-id="@session.Id">
                    <div class="chat-header">
                        <span>Chat with @(session.User1Id == User.FindFirstValue(ClaimTypes.NameIdentifier) ? session.User2.UserName : session.User1.UserName)</span>
                        <button class="deleteButton" onclick="deleteChatSession(@session.Id)">Delete</button>
                    </div>
                    <div class="chat-body">
                        <div class="messages-list">
                            @foreach (var message in session.Messages)
                            {
                                <div class="message">
                                    <strong>@message.Sender.UserName:</strong> @message.Content
                                </div>
                            }
                        </div>
                        <input type="text" class="messageInput" placeholder="Type your message here...">
                        <button class="sendButton" data-session-id="@session.Id">Send</button>
                    </div>
                </div>
            }
        </div>
    </div>
</body>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.2/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.on("ReceiveMessage", function (sessionId, user, message) {
            const msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            const encodedMsg = `<strong>${user}:</strong> ${msg}`;
            const div = document.createElement("div");
            div.className = "message";
            div.innerHTML = encodedMsg;

            // Find the correct session to append the message
            document.querySelectorAll('.chat-session').forEach(session => {
                if (session.dataset.sessionId === sessionId.toString()) {
                    session.querySelector('.messages-list').appendChild(div);
                }
            });
        });

        connection.start().then(() => console.log('Connected to hub')).catch(err => console.error('Error connecting to hub:', err));

        document.querySelectorAll(".sendButton").forEach(button => {
            button.addEventListener("click", function (event) {
                event.preventDefault();
                const sessionId = this.dataset.sessionId;
                const messageInput = document.querySelector(`.chat-session[data-session-id="${sessionId}"] .messageInput`);
                const message = messageInput.value.trim();
                if (!message) {
                    alert('Message content cannot be empty.');
                    return;
                }

                fetch('/Chat/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        chatSessionId: parseInt(sessionId, 10),
                        content: message
                    })
                }).then(response => {
                    if (!response.ok) {
                        console.error('Failed to send message to server:', response.status);
                        return response.text().then(text => { throw new Error(text); });
                    } else {
                        // Add the message immediately to the UI
                        const div = document.createElement('div');
                        div.className = "message";
                        div.innerHTML = `<strong>You:</strong> ${message}`;
                        document.querySelector(`.chat-session[data-session-id="${sessionId}"] .messages-list`).appendChild(div);
                        messageInput.value = ''; // Clear the input after successful send
                    }
                }).catch(error => {
                    console.error('Failed to send message to server:', error);
                });
            });
        });

        function deleteChatSession(chatSessionId) {
            if (confirm('Are you sure you want to delete this chat session?')) {
                fetch('/Chat/DeleteChatSession', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ chatSessionId: chatSessionId })
                }).then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to delete chat session.');
                    }
                }).catch(error => {
                    console.error('Failed to delete chat session:', error);
                });
            }
        }

    </script>

    <input type="hidden" id="antiForgeryToken" name="__RequestVerificationToken" value="@antiForgeryToken" />
}