@using System.Security.Claims
@model GreenMarketBackend.Models.ViewModels.ChatViewModels.ChatViewModel

@{
    ViewData["Title"] = "Chat";
    Layout = "~/Views/Shared/_NavBar.cshtml";
}

<head>
    <link rel="stylesheet" href="~/css/styles.css" asp-append-version="true" />
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4">Chat Room</h2>
        @foreach (var session in Model.ChatSessions)
        {
            <div class="card chat-session mb-3" data-session-id="@session.Id">
                <div class="card-header">
                    Chat with @(session.User1Id == User.FindFirstValue(ClaimTypes.NameIdentifier) ? session.User2.UserName : session.User1.UserName)
                </div>
                <div class="card-body">
                    <div class="messages-list bg-light" style="height: 300px; overflow-y: auto; margin-bottom: 10px;">
                        @foreach (var message in session.Messages)
                        {
                            <div class="p-2 border-bottom">
                                <strong>@message.Sender.UserName:</strong> @message.Content
                            </div>
                        }
                    </div>
                    <input type="text" class="form-control messageInput" placeholder="Type your message here...">
                    <button class="btn btn-primary sendButton mt-2" style="width: 100%;" data-session-id="@session.Id">Send</button>
                </div>
            </div>
        }
    </div>
</body>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.2/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.on("ReceiveMessage", function (user, message) {
            const msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            const encodedMsg = `<strong>${user}:</strong> ${msg}`;
            const div = document.createElement("div");
            div.innerHTML = encodedMsg;

            // Find the correct session to append the message
            document.querySelectorAll('.chat-session').forEach(session => {
                if (session.dataset.sessionId === user.sessionId.toString()) {
                    session.querySelector('.messages-list').appendChild(div);
                }
            });
        });

        connection.start().then(() => console.log('Connected to hub')).catch(err => console.error('Error connecting to hub:', err));

        document.getElementById('startNewChatButton').addEventListener('click', function () {
            const username = document.getElementById('newChatUsername').value;
            if (username) {
                fetch('/Chat/StartChatByUsername', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ username: username })
                }).then(response => response.json())
                    .then(data => {
                        if (data.sessionId) {
                            console.log('Chat started with session:', data.sessionId);
                            // Optionally redirect to the chat session or update the UI to show it
                        }
                    }).catch(error => {
                        console.error('Failed to start chat:', error);
                    });
            }
        });

        document.querySelectorAll(".sendButton").forEach(button => {
            button.addEventListener("click", function (event) {
                event.preventDefault();
                const sessionId = this.dataset.sessionId;
                const messageInput = document.querySelector(`.chat-session[data-session-id="${sessionId}"] .messageInput`);
                const message = messageInput.value.trim();
                if (!message) {
                    alert('Message content cannot be empty.');
                    return;
                }

                fetch('/Chat/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        chatSessionId: parseInt(sessionId, 10),
                        content: message
                    })
                }).then(response => {
                    if (!response.ok) {
                        console.error('Failed to send message to server:', response.status);
                        return response.text().then(text => { throw new Error(text); });
                    } else {
                        // Add the message immediately to the UI
                        const div = document.createElement('div');
                        div.innerHTML = `<strong>You:</strong> ${message}`;
                        document.getElementById(`messagesList_${sessionId}`).appendChild(div);
                        messageInput.value = ''; // Clear the input after successful send
                    }
                }).catch(error => {
                    console.error('Failed to send message to server:', error);
                });
            });
        });
    </script>
}
