@using GreenMarketBackend.Models.ViewModels.ProductViewModels
@model ProductFilterViewModel
@{
    ViewData["Title"] = "Products";
    Layout = "_NavBar";
    var sortOrder = Context.Request.Query["sortOrder"];
}
<div class="row">
    <div class="col text-start mt-4 ms-3">
        <a href="@Url.Action("Create", "Products")" style="text-decoration:none; color:green">Add Your Product</a>
    </div>
    <div class="col text-end mt-4 me-3">
        <a href="@Url.Action("MyProducts", "Products")" style="text-decoration:none; color:green">My Products</a>
    </div>
</div>
<body>
    <div class="container my-5" id="products">
        <h2 class="text-center mb-4">Our Products</h2>

        <!-- Filter and Search Form -->
        <form method="get" asp-action="Index">
            <div class="row mb-3">
                <div class="col-md-6">
                    <input type="text" name="search" class="form-control" style="margin-top: 0.9rem" placeholder="Search products by name..." value="@Context.Request.Query["search"]">
                </div>

                <!-- Parent Category Dropdown (aligned horizontally) -->
                <div class="col-md-3">
                    <label for="parentCategory">Select Parent Category:</label>
                    <select name="parentCategoryId" class="form-select" id="parentCategory" onchange="this.form.submit()">
                        <option value="">All</option> <!-- 'All' Option -->
                        @foreach (var parentCategory in Model.ParentCategories)
                        {
                            if (Model.SelectedParentCategoryId == parentCategory.CategoryId)
                            {
                                <option value="@parentCategory.CategoryId" selected>@parentCategory.Name</option>
                            }
                            else
                            {
                                <option value="@parentCategory.CategoryId">@parentCategory.Name</option>
                            }
                        }
                    </select>
                </div>

                <!-- Child Category Dropdown (aligned horizontally) -->
                <div class="col-md-3">
                    <label for="childCategory">Select Child Category:</label>
                    <select name="childCategoryId" class="form-select" id="childCategory" onchange="this.form.submit()">
                        <option value="">All</option> <!-- 'All' Option -->
                        @foreach (var childCategory in Model.ChildCategories)
                        {
                            if (Model.SelectedChildCategoryId == childCategory.CategoryId)
                            {
                                <option value="@childCategory.CategoryId" selected>@childCategory.Name</option>
                            }
                            else
                            {
                                <option value="@childCategory.CategoryId">@childCategory.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <!-- Sort Order Dropdown (under child category) -->
            <div class="row mb-4 justify-content-end">
                <div class="col-md-3">
                    <label for="sortOrder">Sort by:</label>
                    <select name="sortOrder" class="form-select" id="sortOrder" onchange="this.form.submit()">
                        @if (sortOrder == "asc")
                        {
                            <option value="asc" selected>Price: Low to High</option>
                            <option value="desc">Price: High to Low</option>
                        }
                        else if (sortOrder == "desc")
                        {
                            <option value="asc">Price: Low to High</option>
                            <option value="desc" selected>Price: High to Low</option>
                        }
                        else
                        {
                            <option value="asc">Price: Low to High</option>
                            <option value="desc">Price: High to Low</option>
                        }
                    </select>
                </div>
            </div>
        </form> 

        <!-- Products Listing -->
        <div id="productList" class="row g-4">
            @foreach (var product in Model.Products)
            {
                <div class="col-md-4 product-card" data-category="@product.Category.Name" data-price="@product.Price">
                    <div class="card">
                        <a asp-action="Details" asp-route-id="@product.ProductId" class="text-decoration-none text-dark">
                            <img src="@product.ImageURL" class="card-img-top" alt="@product.Name">
                            <div class="card-body">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text">@product.Price.ToString("C") - @product.Description</p>
                                <p class="card-text">Category: @product.Category.Name</p>
                            </div>
                        </a>
                        <div class="card-body">
                            @if (User.IsInRole("Admin"))
                            {
@*                                 <form asp-action="Delete" method="post" class="d-inline">
                                    <input type="hidden" name="id" value="@product.ProductId" />
                                    <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                                </form> *@
                                <button type="button" class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal" data-product-id="@product.ProductId">Delete</button>
                            }
             
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    <!-- Delete Confirmation Modal -->

    <!-- Modal HTML -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this product? This action cannot be undone.
                </div>
                <div class="modal-footer">
                    <form id="adminDeleteForm" method="post" action="@Url.Action("AdminHardDelete", "Products")">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="productIdInput" name="productId" value="" />
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        <script>
            $(document).ready(function () {
                // When the modal is shown
                $('#deleteModal').on('show.bs.modal', function (event) {
                    var button = $(event.relatedTarget); // Button that triggered the modal
                    var productId = button.data('product-id'); // Extract product ID from data attribute

                    // Set product ID in hidden input in the form
                    $('#productIdInput').val(productId);
                });
            });
        </script>

        <script>
            var deleteModal = document.getElementById('deleteModal');
            deleteModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var productId = button.getAttribute('data-product-id');
                var productIdInput = document.getElementById('productIdInput');
                productIdInput.value = productId;
            });
        </script>
    }
    <!-- JavaScript to filter and sort products -->
    @* <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.querySelector('input[name="search"]');
            const filterCategory = document.querySelector('select[name="parentCategoryId"]');
            const sortOrder = document.querySelector('select[name="sortOrder"]');
            const productList = document.getElementById('productList');

            // Filter and search function
            function filterProducts() {
                const searchQuery = searchInput.value.toLowerCase();
                const category = filterCategory.value;
                const products = productList.getElementsByClassName('product-card');

                Array.from(products).forEach(function (product) {
                    const title = product.querySelector('.card-title').textContent.toLowerCase();
                    const productCategory = product.getAttribute('data-category');
                    const matchesSearch = title.includes(searchQuery);
                    const matchesCategory = category === "" || productCategory === category;

                    product.style.display = matchesSearch && matchesCategory ? 'block' : 'none';
                });

                // Sort Products
                sortProducts();
            }

            // Sort function
            function sortProducts() {
                const order = sortOrder.value;
                const products = Array.from(productList.getElementsByClassName('product-card'));

                products.sort(function (a, b) {
                    const priceA = parseFloat(a.getAttribute('data-price'));
                    const priceB = parseFloat(b.getAttribute('data-price'));

                    return order === 'asc' ? priceA - priceB : priceB - priceA;
                });

                products.forEach(function (product) {
                    productList.appendChild(product);
                });
            }

            // Event Listeners
            searchInput.addEventListener('input', filterProducts);
            filterCategory.addEventListener('change', filterProducts);
            sortOrder.addEventListener('change', sortProducts);

            // Initial filter application
            filterProducts();
        });
    </script> *@

</body>
