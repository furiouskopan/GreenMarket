@model GreenMarketBackend.Models.ViewModels.ProductFilterViewModel

@{
    ViewData["Title"] = "Products";
    Layout = "~/Views/Shared/_NavBar.cshtml";
    var sortOrder = Context.Request.Query["sortOrder"];
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Green Market</title>
    <!-- Bootstrap 5.2.3 CSS -->    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <link href="~/css/styles.css" rel="stylesheet">
</head>

<body>
    <!-- Main Content -->
    <div class="container my-5" id="products">
        <h2 class="text-center mb-4">Our Products</h2>

        <!-- Filter and Search Form -->
        <form method="get" asp-action="Index">
            <div class="row mb-4">
                <div class="col-md-6">
                    <input type="text" name="search" class="form-control" placeholder="Search products by name..." value="@Context.Request.Query["search"]">
                </div>
                <div class="col-md-3">
                    <select name="parentCategoryId" class="form-select" onchange="this.form.submit()">
                        <option value="">Select Parent Category</option>
                        @foreach (var parentCategory in Model.ParentCategories)
                        {
                            if (Model.SelectedParentCategoryId == parentCategory.CategoryId)
                            {
                                <option value="@parentCategory.CategoryId" selected>@parentCategory.Name</option>
                            }
                            else
                            {
                                <option value="@parentCategory.CategoryId">@parentCategory.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select name="childCategoryId" class="form-select" onchange="this.form.submit()">
                        <option value="">Select Child Category</option>
                        @foreach (var childCategory in Model.ChildCategories)
                        {
                            if (Model.SelectedChildCategoryId == childCategory.CategoryId)
                            {
                                <option value="@childCategory.CategoryId" selected>@childCategory.Name</option>
                            }
                            else
                            {
                                <option value="@childCategory.CategoryId">@childCategory.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-md-3 offset-md-9">
                    <select name="sortOrder" class="form-select" onchange="this.form.submit()">
                        @if (sortOrder == "asc")
                        {
                            <option value="asc" selected>Price: Low to High</option>
                            <option value="desc">Price: High to Low</option>
                        }
                        else if (sortOrder == "desc")
                        {
                            <option value="asc">Price: Low to High</option>
                            <option value="desc" selected>Price: High to Low</option>
                        }
                        else
                        {
                            <option value="asc">Price: Low to High</option>
                            <option value="desc">Price: High to Low</option>
                        }
                    </select>

                </div>
            </div>
        </form>
        <!-- Products Listing -->
        <div id="productList" class="row g-4">
            @foreach (var product in Model.Products)
            {
                <div class="col-md-4 product-card" data-category="@product.Category.Name" data-price="@product.Price">
                    <div class="card">
                        <a asp-action="Details" asp-route-id="@product.ProductId" class="text-decoration-none text-dark">
                            <img src="@product.ImageURL" class="card-img-top" alt="@product.Name">
                            <div class="card-body">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text">@product.Price.ToString("C") - @product.Description</p>
                                <p class="card-text">Category: @product.Category.Name</p>
                            </div>
                        </a>
                        <div class="card-body">
                            <form asp-action="Delete" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@product.ProductId" />
                                <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>

    <!-- JavaScript to filter and sort products -->
    @* <script>
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.querySelector('input[name="search"]');
            const filterCategory = document.querySelector('select[name="parentCategoryId"]');
            const sortOrder = document.querySelector('select[name="sortOrder"]');
            const productList = document.getElementById('productList');

            // Filter and search function
            function filterProducts() {
                const searchQuery = searchInput.value.toLowerCase();
                const category = filterCategory.value;
                const products = productList.getElementsByClassName('product-card');

                Array.from(products).forEach(function (product) {
                    const title = product.querySelector('.card-title').textContent.toLowerCase();
                    const productCategory = product.getAttribute('data-category');
                    const matchesSearch = title.includes(searchQuery);
                    const matchesCategory = category === "" || productCategory === category;

                    product.style.display = matchesSearch && matchesCategory ? 'block' : 'none';
                });

                // Sort Products
                sortProducts();
            }

            // Sort function
            function sortProducts() {
                const order = sortOrder.value;
                const products = Array.from(productList.getElementsByClassName('product-card'));

                products.sort(function (a, b) {
                    const priceA = parseFloat(a.getAttribute('data-price'));
                    const priceB = parseFloat(b.getAttribute('data-price'));

                    return order === 'asc' ? priceA - priceB : priceB - priceA;
                });

                products.forEach(function (product) {
                    productList.appendChild(product);
                });
            }

            // Event Listeners
            searchInput.addEventListener('input', filterProducts);
            filterCategory.addEventListener('change', filterProducts);
            sortOrder.addEventListener('change', sortProducts);

            // Initial filter application
            filterProducts();
        });
    </script> *@

</body>

</html>